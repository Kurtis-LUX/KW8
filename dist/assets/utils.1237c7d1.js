const t=[];for(let u=0;u<256;++u)t.push((u+256).toString(16).slice(1));let r;const n=new Uint8Array(16);const o={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function e(e,u,d){var a,i,s;if(o.randomUUID&&!u&&!e)return o.randomUUID();const c=null!=(s=null!=(i=(e=e||{}).random)?i:null==(a=e.rng)?void 0:a.call(e))?s:function(){if(!r){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");r=crypto.getRandomValues.bind(crypto)}return r(n)}();if(c.length<16)throw new Error("Random bytes length must be >= 16");if(c[6]=15&c[6]|64,c[8]=63&c[8]|128,u){if((d=d||0)<0||d+16>u.length)throw new RangeError(`UUID byte range ${d}:${d+15} is out of buffer bounds`);for(let t=0;t<16;++t)u[d+t]=c[t];return u}return function(r,n=0){return(t[r[n+0]]+t[r[n+1]]+t[r[n+2]]+t[r[n+3]]+"-"+t[r[n+4]]+t[r[n+5]]+"-"+t[r[n+6]]+t[r[n+7]]+"-"+t[r[n+8]]+t[r[n+9]]+"-"+t[r[n+10]]+t[r[n+11]]+t[r[n+12]]+t[r[n+13]]+t[r[n+14]]+t[r[n+15]]).toLowerCase()}(c)}export{e as v};
